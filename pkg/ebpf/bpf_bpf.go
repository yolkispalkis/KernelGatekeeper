// Code generated by bpf2go; DO NOT EDIT.

package ebpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type bpfClientProcessInfoT struct{ PidTgid uint64 }

type bpfConnectionStateT struct {
	PidTgid uint64
	UidGid  uint64
}

type bpfConnectionTupleT struct {
	SrcIp    uint32
	DstIp    uint32
	SrcPort  uint16
	DstPort  uint16
	Protocol uint8
	Padding  [3]uint8
}

type bpfGlobalStatsT struct {
	Packets uint64
	Bytes   uint64
}

// loadBpf returns the embedded CollectionSpec for bpf.
func loadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bpf: %w", err)
	}

	return spec, err
}

// loadBpfObjects loads bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*bpfObjects
//	*bpfPrograms
//	*bpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfSpecs struct {
	bpfProgramSpecs
	bpfMapSpecs
	bpfVariableSpecs
}

// bpfProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfProgramSpecs struct {
	KernelgatekeeperSockops *ebpf.ProgramSpec `ebpf:"kernelgatekeeper_sockops"`
}

// bpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfMapSpecs struct {
	ConnectionMap       *ebpf.MapSpec `ebpf:"connection_map"`
	GlobalStats         *ebpf.MapSpec `ebpf:"global_stats"`
	NotificationRingbuf *ebpf.MapSpec `ebpf:"notification_ringbuf"`
	ProcessMap          *ebpf.MapSpec `ebpf:"process_map"`
	ProxySockMap        *ebpf.MapSpec `ebpf:"proxy_sock_map"`
	TargetPorts         *ebpf.MapSpec `ebpf:"target_ports"`
}

// bpfVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfVariableSpecs struct {
}

// bpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfObjects struct {
	bpfPrograms
	bpfMaps
	bpfVariables
}

func (o *bpfObjects) Close() error {
	return _BpfClose(
		&o.bpfPrograms,
		&o.bpfMaps,
	)
}

// bpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfMaps struct {
	ConnectionMap       *ebpf.Map `ebpf:"connection_map"`
	GlobalStats         *ebpf.Map `ebpf:"global_stats"`
	NotificationRingbuf *ebpf.Map `ebpf:"notification_ringbuf"`
	ProcessMap          *ebpf.Map `ebpf:"process_map"`
	ProxySockMap        *ebpf.Map `ebpf:"proxy_sock_map"`
	TargetPorts         *ebpf.Map `ebpf:"target_ports"`
}

func (m *bpfMaps) Close() error {
	return _BpfClose(
		m.ConnectionMap,
		m.GlobalStats,
		m.NotificationRingbuf,
		m.ProcessMap,
		m.ProxySockMap,
		m.TargetPorts,
	)
}

// bpfVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfVariables struct {
}

// bpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfPrograms struct {
	KernelgatekeeperSockops *ebpf.Program `ebpf:"kernelgatekeeper_sockops"`
}

func (p *bpfPrograms) Close() error {
	return _BpfClose(
		p.KernelgatekeeperSockops,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpf_bpf.o
var _BpfBytes []byte
